/**
 * Copyright (C) 2017 - 2018 Bosch Sensortec GmbH
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * Neither the name of the copyright holder nor the names of the
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
 * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDER
 * OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
 * OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
 *
 * The information provided is believed to be accurate and reliable.
 * The copyright holder assumes no responsibility
 * for the consequences of use
 * of such information nor for any infringement of patents or
 * other rights of third parties which may result from its use.
 * No license is granted by implication or otherwise under any patent or
 * patent rights of the copyright holder.
 *
 * @file       bmi08x.h
 * @date       27 May 2018
 * @version    1.1.0
 *
 */

/*! \file bmi08x.h
 \brief Sensor Driver for BMI08x family of sensors */
#ifndef BMI08X_H_
#define BMI08X_H_

#ifdef __cplusplus
extern "C"
{
#endif

/*********************************************************************/
/* header files */
#include "bmi08x_defs.h"
/*********************************************************************/
/* (extern) variable declarations */

/**\name Feature configuration file */
static const uint8_t bmi08x_config_file[] = {
	0xC8, 0x2E, 0x00, 0x2E, 0x80, 0x2E, 0x47, 0x01, 0xC8, 0x2E, 0x00, 0x2E, 0xC8, 0x2E, 0x00, 0x2E, 0xC8, 0x2E, 0x00, 0x2E, 0x80, 0x2E, 0xA0, 0x00, 0x80, 0x2E, 0x7C, 0x00, 0x80, 0x2E, 0x11, 0x01, 0x50, 0x39, 0x21, 0x2E, 0xB0, 0xF0, 0x10, 0x30, 0x21, 0x2E, 0x16, 0xF0, 0x80, 0x2E, 0x90, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5A, 0xBE, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x50, 0x80, 0x7F, 0xE7, 0x7F, 0xD5, 0x7F, 0xC4, 0x7F, 0xB3, 0x7F, 0xA2, 0x7F, 0x91, 0x7F, 0xF6, 0x7F, 0x7B, 0x7F, 0x00, 0x2E, 0x01, 0x2E, 0x43, 0xF0, 0x08, 0xBC, 0x0F, 0xB8, 0x60, 0x7F, 0x00, 0x2E, 0x60, 0x6F, 0x00, 0xB2, 0x01, 0x2F, 0x98, 0x2E, 0xD9, 0xB1, 0x40, 0x30, 0x21, 0x2E, 0xB8, 0xF0, 0xF6, 0x6F, 0x91, 0x6F, 0xA2, 0x6F, 0xB3, 0x6F, 0xC4, 0x6F, 0xD5, 0x6F, 0xE7, 0x6F, 0x7B, 0x6F, 0x80, 0x6F, 0x60, 0x5F, 0xC8, 0x2E, 0xA0, 0x50, 0x80, 0x7F, 0xE7, 0x7F, 0xD5, 0x7F, 0xC4, 0x7F, 0xB3, 0x7F, 0xA2, 0x7F, 0x91, 0x7F, 0xF6, 0x7F, 0x7B, 0x7F, 0x00, 0x2E, 0x01, 0x2E, 0x29, 0xF0, 0x08, 0xBC, 0x0F, 0xB8, 0x60, 0x7F, 0x00, 0x2E, 0x60, 0x6F, 0x01, 0x90, 0x1B, 0x2F, 0x01, 0x2E, 0x02, 0x01, 0x0E, 0xBC, 0x0E, 0xB8, 0x00, 0x90, 0x05, 0x2F, 0x01, 0x2E, 0x04, 0x01, 0x0F, 0xBC, 0x0F, 0xB8, 0x01, 0xB2, 0x0D, 0x2F, 0x01, 0x2E, 0x63, 0x00, 0x01, 0x90, 0x04, 0x2F, 0x98, 0x2E, 0x6D, 0xB2, 0x00, 0x30, 0x21, 0x2E, 0x63, 0x00, 0x01, 0x2E, 0x37, 0xF0, 0x21, 0x2E, 0x37, 0xF0, 0x02, 0x2D, 0x98, 0x2E, 0x45, 0xB3, 0x80, 0x30, 0x21, 0x2E, 0xB8, 0xF0, 0xF6, 0x6F, 0x91, 0x6F, 0xA2, 0x6F, 0xB3, 0x6F, 0xC4, 0x6F, 0xD5, 0x6F, 0xE7, 0x6F, 0x7B, 0x6F, 0x80, 0x6F, 0x60, 0x5F, 0xC8, 0x2E, 0x40, 0x30, 0x21, 0x2E, 0xBA, 0xF0, 0xB8, 0x2E, 0x80, 0x30, 0x21, 0x2E, 0xBA, 0xF0, 0x10, 0x24, 0x80, 0x00, 0x03, 0x2E, 0x06, 0xF0, 0x08, 0x0A, 0x21, 0x2E, 0x06, 0xF0, 0x00, 0x3E, 0x03, 0x2E, 0x06, 0xF0, 0x08, 0x08, 0x51, 0x30, 0x01, 0x0A, 0x21, 0x2E, 0x06, 0xF0, 0xB8, 0x2E, 0x00, 0x31, 0x21, 0x2E, 0xBA, 0xF0, 0xB8, 0x2E, 0x10, 0x30, 0x21, 0x2E, 0xBB, 0xF0, 0xB8, 0x2E, 0x80, 0x2E, 0x18, 0x00, 0xFD, 0x2D, 0xAA, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x01, 0x00, 0xED, 0x8F, 0xD9, 0x31, 0xC6, 0x01, 0x8C, 0x03, 0xC6, 0x01, 0x00, 0x00, 0x0E, 0x00, 0x0E, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x60, 0x50, 0xE7, 0x7F, 0xF6, 0x7F, 0x36, 0x30, 0x0F, 0x2E, 0x01, 0xF0, 0xFE, 0xBF, 0xFE, 0xBB, 0xB7, 0x05, 0xA6, 0x7F, 0xD3, 0x7F, 0xC4, 0x7F, 0xB5, 0x7F, 0x14, 0x24, 0x89, 0xF0, 0x3F, 0x8B, 0x03, 0x41, 0x44, 0x41, 0xB8, 0xBD, 0x9C, 0x0B, 0xA3, 0x6F, 0x14, 0x24, 0x19, 0x00, 0xB3, 0x11, 0x43, 0x8B, 0x16, 0x43, 0x00, 0x2E, 0x67, 0x41, 0x46, 0x41, 0xF8, 0xBF, 0xBE, 0x0B, 0xB3, 0x11, 0x16, 0x43, 0x43, 0x8D, 0x00, 0x2E, 0xA5, 0x41, 0x86, 0x41, 0xD8, 0xBE, 0x6E, 0x0B, 0xEB, 0x10, 0x03, 0x43, 0x13, 0x30, 0x27, 0x2E, 0x18, 0x00, 0x03, 0x31, 0x27, 0x2E, 0xB8, 0xF0, 0xF6, 0x6F, 0xE7, 0x6F, 0xC4, 0x6F, 0xB5, 0x6F, 0xD3, 0x6F, 0xA0, 0x5F, 0xC8, 0x2E, 0xA0, 0x50, 0x80, 0x7F, 0x91, 0x7F, 0xE7, 0x7F, 0xD5, 0x7F, 0xC4, 0x7F, 0xB3, 0x7F, 0xA2, 0x7F, 0xF6, 0x7F, 0x7B, 0x7F, 0x00, 0x2E, 0x01, 0x2E, 0xB9, 0xF0, 0x60, 0x7F, 0x10, 0x30, 0x61, 0x6F, 0x08, 0x08, 0x00, 0xB2, 0x01, 0x2F, 0x98, 0x2E, 0xE6, 0xB0, 0x10, 0x30, 0x21, 0x2E, 0xB9, 0xF0, 0x21, 0x2E, 0x5F, 0xF0, 0xF6, 0x6F, 0x91, 0x6F, 0xA2, 0x6F, 0xB3, 0x6F, 0xC4, 0x6F, 0xD5, 0x6F, 0xE7, 0x6F, 0x7B, 0x6F, 0x80, 0x6F, 0x60, 0x5F, 0xC8, 0x2E, 0x98, 0x2E, 0x9E, 0x01, 0x20, 0x26, 0x98, 0x2E, 0xDE, 0x00, 0x98, 0x2E, 0xF9, 0x00, 0x98, 0x2E, 0xF5, 0x00, 0x98, 0x2E, 0xE2, 0x00, 0x10, 0x30, 0x21, 0x2E, 0x59, 0xF0, 0x98, 0x2E, 0x94, 0x01, 0x21, 0x30, 0x10, 0x24, 0x19, 0x00, 0x00, 0x2E, 0x00, 0x2E, 0xD0, 0x2E, 0x05, 0x2E, 0x18, 0x00, 0x80, 0xB2, 0x02, 0x30, 0x05, 0x2F, 0x23, 0x2E, 0x5F, 0xF0, 0x25, 0x2E, 0x18, 0x00, 0x98, 0x2E, 0x00, 0xB0, 0x98, 0x2E, 0x51, 0xB2, 0xEC, 0x2D, 0x1A, 0x24, 0x26, 0x00, 0x80, 0x2E, 0x6C, 0x01, 0x10, 0x50, 0x01, 0x2E, 0x55, 0xF0, 0xF0, 0x7F, 0x00, 0x2E, 0xF0, 0x6F, 0x21, 0x2E, 0x55, 0xF0, 0xF0, 0x5F, 0xB8, 0x2E, 0x20, 0x50, 0x00, 0x30, 0xE0, 0x7F, 0xFB, 0x7F, 0x11, 0x24, 0xB1, 0xF0, 0x42, 0x40, 0x43, 0x30, 0x93, 0x0A, 0x42, 0x42, 0x58, 0x82, 0x12, 0x24, 0xAF, 0x00, 0x62, 0x42, 0x12, 0x24, 0xFF, 0x00, 0x42, 0x42, 0x69, 0x82, 0x72, 0x3C, 0x43, 0x40, 0x9A, 0x08, 0x83, 0x32, 0x93, 0x0A, 0x42, 0x42, 0x42, 0x82, 0x02, 0x3F, 0x43, 0x40, 0x9A, 0x08, 0x52, 0x42, 0x0B, 0x31, 0x4B, 0x42, 0x7E, 0x82, 0x12, 0x31, 0x42, 0x42, 0x11, 0x24, 0xFE, 0x00, 0x05, 0x2E, 0x40, 0xF0, 0x51, 0x08, 0x5E, 0x90, 0x27, 0x2F, 0x11, 0x24, 0x00, 0x02, 0x12, 0x24, 0x05, 0x80, 0x13, 0x24, 0xFF, 0xB7, 0x1B, 0x24, 0x00, 0xB0, 0x04, 0x30, 0x05, 0x30, 0x56, 0x32, 0x6E, 0x1A, 0x00, 0x2F, 0xA5, 0x34, 0x69, 0x1A, 0x01, 0x2F, 0x5B, 0x25, 0x00, 0x2E, 0x56, 0x41, 0x26, 0x0D, 0x06, 0x30, 0xCF, 0xBB, 0x41, 0xBE, 0xC0, 0x91, 0x01, 0x2F, 0x00, 0x2E, 0x01, 0x2D, 0x22, 0x0D, 0x81, 0x8D, 0x90, 0xA1, 0xF5, 0x2F, 0xEB, 0x0E, 0xE8, 0x2F, 0x01, 0x2E, 0x25, 0x00, 0x20, 0x1A, 0x05, 0x2F, 0x20, 0x30, 0xE0, 0x7F, 0x03, 0x2D, 0x30, 0x30, 0xE0, 0x7F, 0x00, 0x2E, 0xE0, 0x6F, 0x00, 0xB2, 0x03, 0x2F, 0x21, 0x2E, 0x59, 0xF0, 0x98, 0x2E, 0x94, 0x01, 0xFB, 0x6F, 0xE0, 0x5F, 0xB8, 0x2E, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0xB0, 0x50, 0xF0, 0x7F, 0x00, 0x2E, 0x01, 0x2E, 0x01, 0x01, 0x02, 0xBC, 0x0F, 0xB8, 0xE0, 0x7F, 0x00, 0x2E, 0x01, 0x2E, 0x01, 0x01, 0x01, 0xBC, 0x0F, 0xB8, 0xD0, 0x7F, 0x00, 0x2E, 0x01, 0x2E, 0x01, 0x01, 0x0F, 0xB8, 0xC0, 0x7F, 0x02, 0x30, 0xE6, 0x6F, 0xD4, 0x6F, 0xC3, 0x6F, 0x80, 0x91, 0x04, 0x2F, 0x00, 0x91, 0x02, 0x2F, 0xC0, 0xB2, 0x90, 0x2E, 0xE2, 0xB0, 0xF0, 0x6F, 0x0B, 0x2E, 0x24, 0x00, 0x01, 0x82, 0x40, 0x91, 0x14, 0x2F, 0x41, 0x87, 0x27, 0x2E, 0x24, 0x00, 0x00, 0x40, 0x21, 0x2E, 0x1F, 0x00, 0x53, 0x40, 0x10, 0x24, 0x20, 0x00, 0x13, 0x42, 0x00, 0x2E, 0x41, 0x40, 0x01, 0x42, 0x25, 0x2E, 0x1C, 0x00, 0x25, 0x2E, 0x1D, 0x00, 0x25, 0x2E, 0x22, 0x00, 0x50, 0x5F, 0xB8, 0x2E, 0x0B, 0x2E, 0x00, 0x01, 0xD5, 0xBE, 0xD5, 0xBA, 0xB5, 0x7F, 0x00, 0x2E, 0x0B, 0x2E, 0x01, 0x01, 0xD3, 0xBE, 0xD3, 0xBA, 0xA5, 0x7F, 0x00, 0x2E, 0x0B, 0x2E, 0x00, 0x01, 0xD4, 0xBE, 0xDF, 0xBA, 0x95, 0x7F, 0x00, 0x2E, 0x95, 0x6F, 0x0F, 0x2E, 0x1E, 0x00, 0x3D, 0x1A, 0x05, 0x2F, 0x25, 0x2E, 0x1C, 0x00, 0x25, 0x2E, 0x1D, 0x00, 0x2B, 0x2E, 0x1E, 0x00, 0x82, 0x7F, 0x72, 0x7F, 0x80, 0x91, 0x62, 0x7F, 0x01, 0x2F, 0x06, 0x30, 0x07, 0x2D, 0x06, 0x40, 0x0F, 0x2E, 0x1F, 0x00, 0xB7, 0x05, 0x80, 0xA9, 0xD6, 0x05, 0xB7, 0x23, 0x86, 0x7F, 0x00, 0x91, 0x01, 0x2F, 0x04, 0x30, 0x07, 0x2D, 0x44, 0x40, 0x0D, 0x2E, 0x20, 0x00, 0x26, 0x05, 0x00, 0xA9, 0x94, 0x05, 0x26, 0x23, 0x74, 0x7F, 0xC0, 0x90, 0x01, 0x2F, 0x00, 0x2E, 0x09, 0x2D, 0x02, 0x86, 0x00, 0x2E, 0xC3, 0x40, 0x09, 0x2E, 0x21, 0x00, 0xDC, 0x04, 0xC0, 0xA8, 0x93, 0x04, 0x9A, 0x22, 0x62, 0x7F, 0x12, 0x30, 0x84, 0x6F, 0xB3, 0x6F, 0x63, 0x0F, 0x14, 0x30, 0x08, 0x2F, 0x74, 0x6F, 0x63, 0x0F, 0x14, 0x30, 0x04, 0x2F, 0x64, 0x6F, 0x63, 0x0F, 0x14, 0x30, 0x00, 0x2F, 0x04, 0x30, 0x54, 0x7F, 0x40, 0x91, 0x0B, 0x2E, 0x1C, 0x00, 0x54, 0x6F, 0xA3, 0x6F, 0x6A, 0x29, 0x1D, 0x2F, 0x00, 0x91, 0x06, 0x30, 0x14, 0x24, 0x20, 0x00, 0x0D, 0x2F, 0x2D, 0x2E, 0x1C, 0x00, 0x05, 0x2E, 0x1D, 0x00, 0x81, 0x84, 0x25, 0x2E, 0x1D, 0x00, 0x05, 0x2E, 0x1D, 0x00, 0x53, 0x0E, 0x2B, 0x2F, 0x2D, 0x2E, 0x22, 0x00, 0x29, 0x2D, 0x2B, 0x2E, 0x1C, 0x00, 0x2D, 0x2E, 0x1D, 0x00, 0x0B, 0x2E, 0x1C, 0x00, 0x6B, 0x0E, 0x20, 0x2F, 0x25, 0x2E, 0x22, 0x00, 0x1E, 0x2D, 0x00, 0xB3, 0x05, 0x2F, 0x02, 0x30, 0x25, 0x2E, 0x1C, 0x00, 0x25, 0x2E, 0x22, 0x00, 0x08, 0x2D, 0x2B, 0x2E, 0x1C, 0x00, 0x09, 0x2E, 0x1C, 0x00, 0x63, 0x0E, 0x01, 0x2F, 0x25, 0x2E, 0x22, 0x00, 0x02, 0x40, 0x25, 0x2E, 0x1F, 0x00, 0x31, 0x25, 0x00, 0x2E, 0xD5, 0x40, 0x12, 0x24, 0x20, 0x00, 0x42, 0x25, 0x95, 0x42, 0x00, 0x2E, 0xC3, 0x40, 0x83, 0x42, 0x00, 0x2E, 0x05, 0x2E, 0x22, 0x00, 0x80, 0xB2, 0x0D, 0x2F, 0x00, 0x40, 0x21, 0x2E, 0x1F, 0x00, 0x50, 0x40, 0x10, 0x43, 0x00, 0x2E, 0x40, 0x40, 0x00, 0x43, 0x20, 0x30, 0x21, 0x2E, 0x5E, 0xF0, 0x02, 0x2D, 0x25, 0x2E, 0x24, 0x00, 0x50, 0x5F, 0xB8, 0x2E, 0x30, 0x50, 0xFB, 0x7F, 0x98, 0x2E, 0x23, 0xB2, 0x13, 0x24, 0x4F, 0x00, 0xD0, 0x42, 0xC1, 0x42, 0xFA, 0x82, 0xD1, 0x7F, 0xE3, 0x7F, 0x98, 0x2E, 0x8D, 0xB1, 0xD1, 0x6F, 0x00, 0x2E, 0x41, 0x40, 0x40, 0xB2, 0x6D, 0x2F, 0xE1, 0x6F, 0x44, 0x84, 0x03, 0x2E, 0x4F, 0x00, 0x83, 0x40, 0xB7, 0x84, 0x4B, 0x04, 0x81, 0x42, 0x00, 0x2E, 0x83, 0x40, 0xC0, 0xAC, 0x01, 0x2F, 0x23, 0x2E, 0x4B, 0x00, 0x12, 0x25, 0x93, 0x40, 0x82, 0x40, 0x1A, 0x0F, 0x01, 0x2F, 0xC0, 0xAC, 0x02, 0x2F, 0x03, 0x30, 0x27, 0x2E, 0x4B, 0x00, 0x42, 0x86, 0xC9, 0x84, 0xC0, 0x40, 0x43, 0x40, 0x18, 0x0E, 0x82, 0x40, 0x25, 0x2F, 0x12, 0x25, 0x12, 0x24, 0x51, 0x00, 0x8F, 0x80, 0x82, 0x40, 0xE0, 0x7F, 0x98, 0x2E, 0x69, 0xB1, 0xE1, 0x6F, 0x00, 0x2E, 0x40, 0x42, 0x77, 0x82, 0x7B, 0x84, 0xB9, 0x86, 0xD6, 0x80, 0x41, 0x40, 0x82, 0x40, 0xC3, 0x40, 0xE0, 0x7F, 0x98, 0x2E, 0x69, 0xB1, 0xE1, 0x6F, 0x00, 0x2E, 0x40, 0x42, 0x77, 0x82, 0x7B, 0x84, 0xB8, 0x86, 0xD7, 0x80, 0x41, 0x40, 0x82, 0x40, 0xC3, 0x40, 0xE0, 0x7F, 0x98, 0x2E, 0x69, 0xB1, 0xE1, 0x6F, 0x00, 0x2E, 0x40, 0x42, 0x24, 0x2D, 0x11, 0x24, 0x5B, 0x00, 0x45, 0x80, 0x41, 0x40, 0xE0, 0x7F, 0x98, 0x2E, 0x7B, 0xB1, 0xE1, 0x6F, 0x00, 0x2E, 0x40, 0x42, 0x7C, 0x82, 0x7B, 0x84, 0xB4, 0x86, 0xD6, 0x80, 0x41, 0x40, 0x82, 0x40, 0xC3, 0x40, 0xE0, 0x7F, 0x98, 0x2E, 0x7B, 0xB1, 0xE1, 0x6F, 0x00, 0x2E, 0x40, 0x42, 0x7C, 0x82, 0x7B, 0x84, 0xB3, 0x86, 0xD7, 0x80, 0x41, 0x40, 0x82, 0x40, 0xC3, 0x40, 0xE0, 0x7F, 0x98, 0x2E, 0x7B, 0xB1, 0xE1, 0x6F, 0x00, 0x2E, 0x40, 0x42, 0x98, 0x2E, 0xC5, 0xB1, 0x11, 0x30, 0x23, 0x2E, 0x5E, 0xF0, 0xFB, 0x6F, 0xD0, 0x5F, 0xB8, 0x2E, 0x30, 0x50, 0xF3, 0x7F, 0xE2, 0x7F, 0xD1, 0x7F, 0x13, 0x24, 0x4E, 0x00, 0xD1, 0x6F, 0xE4, 0x6F, 0xE2, 0x40, 0xF0, 0x6F, 0x21, 0x05, 0xC3, 0x40, 0xA2, 0x10, 0x03, 0x04, 0x10, 0x18, 0xD0, 0x5F, 0x0E, 0x00, 0xB8, 0x2E, 0x30, 0x50, 0xF3, 0x7F, 0xE2, 0x7F, 0xD1, 0x7F, 0x13, 0x24, 0x4E, 0x00, 0xE1, 0x6F, 0xD4, 0x6F, 0xE2, 0x40, 0xF0, 0x6F, 0x21, 0x05, 0xC3, 0x40, 0xA2, 0x10, 0x18, 0x04, 0x10, 0x18, 0xD0, 0x5F, 0x0E, 0x00, 0xB8, 0x2E, 0x01, 0x2E, 0x02, 0x01, 0x8E, 0xBC, 0x01, 0x2E, 0x4A, 0x00, 0x9E, 0xB8, 0x01, 0x1A, 0x2E, 0x2F, 0x01, 0x2E, 0x02, 0x01, 0x0E, 0xBC, 0x0E, 0xB8, 0x21, 0x2E, 0x4A, 0x00, 0x03, 0x2E, 0x4A, 0x00, 0x43, 0xB2, 0x10, 0x24, 0x4D, 0x00, 0x1B, 0x2F, 0x42, 0xB2, 0x11, 0x2F, 0x41, 0xB2, 0x06, 0x2F, 0x01, 0x30, 0x11, 0x42, 0x01, 0x42, 0x3E, 0x80, 0x00, 0x2E, 0x01, 0x42, 0xB8, 0x2E, 0x41, 0x33, 0x11, 0x42, 0x61, 0x30, 0x01, 0x42, 0x3E, 0x80, 0x11, 0x24, 0x80, 0x00, 0x01, 0x42, 0xB8, 0x2E, 0x01, 0x30, 0x11, 0x42, 0x51, 0x30, 0x01, 0x42, 0x3E, 0x80, 0x41, 0x33, 0x01, 0x42, 0xB8, 0x2E, 0x71, 0x30, 0x11, 0x42, 0x41, 0x30, 0x01, 0x42, 0x3E, 0x80, 0x81, 0x31, 0x01, 0x42, 0xB8, 0x2E, 0x10, 0x24, 0x60, 0x00, 0x11, 0x24, 0x52, 0xF0, 0x12, 0x40, 0x52, 0x42, 0x28, 0xB5, 0x52, 0x42, 0x00, 0x2E, 0x12, 0x40, 0x42, 0x42, 0x42, 0x82, 0x00, 0x40, 0x50, 0x42, 0x08, 0xB4, 0x40, 0x42, 0x7E, 0x80, 0xA8, 0xB4, 0x01, 0x42, 0xB8, 0x2E, 0x12, 0x24, 0x59, 0x00, 0x90, 0x40, 0x84, 0x82, 0x20, 0x50, 0x50, 0x42, 0x77, 0x80, 0x82, 0x40, 0x42, 0x42, 0xFB, 0x7F, 0x05, 0x82, 0x00, 0x40, 0x40, 0x42, 0x7C, 0x80, 0x05, 0x82, 0x00, 0x40, 0x40, 0x42, 0x7C, 0x80, 0x05, 0x82, 0x00, 0x40, 0x40, 0x42, 0x77, 0x84, 0x00, 0x2E, 0x90, 0x40, 0x84, 0x82, 0x82, 0x40, 0x50, 0x42, 0x77, 0x80, 0x42, 0x42, 0x05, 0x82, 0x00, 0x40, 0x40, 0x42, 0x7C, 0x80, 0x05, 0x82, 0x00, 0x40, 0x40, 0x42, 0x7C, 0x80, 0x05, 0x82, 0x00, 0x40, 0x40, 0x42, 0x7C, 0x82, 0xE1, 0x7F, 0x98, 0x2E, 0x23, 0xB2, 0xE2, 0x6F, 0x00, 0x2E, 0x90, 0x42, 0x81, 0x42, 0xBC, 0x82, 0x10, 0x24, 0x33, 0xF0, 0x23, 0x40, 0x02, 0x40, 0xB8, 0xBD, 0x9A, 0x0A, 0x03, 0x80, 0x52, 0x42, 0x00, 0x2E, 0x23, 0x40, 0x02, 0x40, 0xB8, 0xBD, 0x9A, 0x0A, 0x03, 0x80, 0x52, 0x42, 0x00, 0x2E, 0x22, 0x40, 0x00, 0x40, 0x28, 0xBD, 0x10, 0x0A, 0x40, 0x42, 0x00, 0x2E, 0xFB, 0x6F, 0xE0, 0x5F, 0xB8, 0x2E, 0x11, 0x24, 0x28, 0xF0, 0x50, 0x50, 0x60, 0x40, 0xF0, 0x7F, 0x51, 0x25, 0x60, 0x40, 0xE0, 0x7F, 0x00, 0x2E, 0x41, 0x40, 0xD1, 0x7F, 0x00, 0x2E, 0xE2, 0x6F, 0xD0, 0x6F, 0x00, 0xB2, 0xF3, 0x6F, 0xA8, 0xB8, 0x28, 0xBE, 0x59, 0x0A, 0x20, 0x0A, 0x01, 0x2F, 0xB0, 0x5F, 0xB8, 0x2E, 0x45, 0x41, 0xC5, 0x7F, 0x00, 0x2E, 0xC5, 0x6F, 0x40, 0x91, 0x09, 0x2F, 0x05, 0x2E, 0x28, 0xF0, 0xB2, 0x7F, 0x00, 0x2E, 0xB2, 0x6F, 0x1A, 0x1A, 0x07, 0x2F, 0xF0, 0x3F, 0x13, 0x25, 0x05, 0x2D, 0x15, 0x1A, 0x02, 0x2F, 0x10, 0x24, 0xFF, 0x00, 0x20, 0x0A, 0xB0, 0x5F, 0xB8, 0x2E, 0x01, 0x2E, 0x03, 0x01, 0x8F, 0xBC, 0x01, 0x2E, 0x23, 0x00, 0x9F, 0xB8, 0x01, 0x1A, 0x12, 0x2F, 0x01, 0x2E, 0x03, 0x01, 0x0F, 0xBC, 0x0F, 0xB8, 0x21, 0x2E, 0x23, 0x00, 0x11, 0x30, 0x05, 0x2E, 0x23, 0x00, 0x51, 0x08, 0xD2, 0x3F, 0x01, 0x2E, 0x07, 0xF0, 0x02, 0x08, 0x91, 0xBC, 0x01, 0x0A, 0x21, 0x2E, 0x07, 0xF0, 0xB8, 0x2E, 0xB8, 0x2E, 0x10, 0x50, 0x12, 0x24, 0x6D, 0x00, 0x00, 0x30, 0x1B, 0x2D, 0xF1, 0x6F, 0xD1, 0x00, 0x00, 0x2E, 0xC0, 0x42, 0xBD, 0x84, 0xD1, 0x00, 0x00, 0x2E, 0xC0, 0x42, 0x89, 0x84, 0xD1, 0x00, 0x00, 0x2E, 0xC0, 0x42, 0xBD, 0x84, 0xD1, 0x00, 0x00, 0x2E, 0xC0, 0x42, 0x89, 0x84, 0xD1, 0x00, 0x00, 0x2E, 0xC0, 0x42, 0xBD, 0x84, 0xD1, 0x00, 0x00, 0x2E, 0xC0, 0x42, 0x41, 0x82, 0xF1, 0x7F, 0xB7, 0x84, 0xF1, 0x6F, 0x42, 0xA2, 0xE1, 0x2F, 0xF0, 0x5F, 0xB8, 0x2E, 0xC0, 0x50, 0x92, 0x7F, 0xFB, 0x7F, 0x81, 0x7F, 0x00, 0x30, 0x60, 0x7F, 0x70, 0x7F, 0x50, 0x7F, 0x00, 0x2E, 0x03, 0x2E, 0x04, 0x01, 0x9D, 0xBC, 0x9E, 0xB8, 0x41, 0x7F, 0x00, 0x2E, 0x42, 0x6F, 0x52, 0x7F, 0xE2, 0x7F, 0x00, 0x2E, 0x83, 0x6F, 0xC3, 0x82, 0xD3, 0x7F, 0x0C, 0x2D, 0x55, 0x6F, 0x7F, 0x89, 0xDC, 0x01, 0x9D, 0x01, 0xCB, 0x41, 0x8B, 0x43, 0xCC, 0x01, 0x4D, 0x01, 0xC7, 0x41, 0x47, 0x43, 0x54, 0x7F, 0x00, 0x2E, 0x54, 0x6F, 0x00, 0xAB, 0xF0, 0x2F, 0x9B, 0x6F, 0x8A, 0x00, 0x4B, 0x42, 0xC2, 0x7F, 0xB1, 0x7F, 0x50, 0x7F, 0x7D, 0x80, 0xA0, 0x7F, 0x13, 0x24, 0x08, 0x01, 0x3F, 0x2D, 0x50, 0x6F, 0x18, 0x01, 0xC6, 0x84, 0xC8, 0x00, 0x50, 0x00, 0x05, 0x41, 0xC7, 0x40, 0x44, 0x40, 0x61, 0x6F, 0x73, 0x6F, 0x2F, 0x18, 0x00, 0xB3, 0x0B, 0x2F, 0x10, 0xA1, 0x03, 0x2F, 0x30, 0x89, 0xBC, 0x11, 0xCE, 0x17, 0x06, 0x2D, 0x74, 0x13, 0x06, 0x31, 0xB4, 0x05, 0xBE, 0x15, 0xFC, 0x11, 0xAE, 0x0B, 0x4E, 0x00, 0xDF, 0x02, 0x61, 0x7F, 0x73, 0x7F, 0xB7, 0x84, 0x01, 0x82, 0xD1, 0x00, 0x86, 0x80, 0xA2, 0x6F, 0x11, 0x01, 0x81, 0x00, 0xC3, 0x40, 0x05, 0x41, 0x84, 0x40, 0x1D, 0x18, 0x72, 0x6F, 0x00, 0xB3, 0x63, 0x6F, 0x0B, 0x2F, 0x10, 0xA1, 0x03, 0x2F, 0x30, 0x89, 0xBC, 0x11, 0xCE, 0x17, 0x06, 0x2D, 0x74, 0x13, 0x06, 0x31, 0xB4, 0x05, 0xBE, 0x15, 0xFC, 0x11, 0xAE, 0x0B, 0xDE, 0x04, 0x97, 0x06, 0x63, 0x7F, 0x72, 0x7F, 0x51, 0x7F, 0x3D, 0x86, 0xB1, 0x6F, 0xE2, 0x6F, 0x50, 0x6F, 0x42, 0x0E, 0xBC, 0x2F, 0xE0, 0x6F, 0xC6, 0x82, 0x98, 0x00, 0x48, 0x00, 0xC0, 0x6F, 0x83, 0x40, 0x04, 0x40, 0x42, 0x40, 0x61, 0x6F, 0x70, 0x6F, 0x80, 0xB2, 0x1C, 0x18, 0x0B, 0x2F, 0x90, 0xA0, 0x03, 0x2F, 0xB0, 0x84, 0xBA, 0x11, 0xCE, 0x17, 0x06, 0x2D, 0x03, 0x31, 0xDA, 0x04, 0xFB, 0x14, 0x32, 0x13, 0xFA, 0x11, 0xA3, 0x0B, 0x4E, 0x00, 0x07, 0x02, 0x61, 0x7F, 0x70, 0x7F, 0x00, 0x2E, 0x72, 0x6F, 0x80, 0xA8, 0x60, 0x6F, 0xD1, 0x6F, 0x13, 0x2F, 0x80, 0x90, 0x03, 0x2F, 0x13, 0x24, 0xFF, 0x7F, 0x43, 0x0F, 0x0D, 0x2F, 0xBF, 0xA0, 0x07, 0x2F, 0xBF, 0x90, 0x03, 0x2F, 0x12, 0x24, 0x00, 0x80, 0x42, 0x0E, 0x01, 0x2F, 0x40, 0x42, 0x07, 0x2D, 0x10, 0x24, 0x00, 0x80, 0x40, 0x42, 0x03, 0x2D, 0x10, 0x24, 0xFF, 0x7F, 0x40, 0x42, 0x00, 0x2E, 0xFB, 0x6F, 0x40, 0x5F, 0x40, 0x40, 0xB8, 0x2E, 0x11, 0x24, 0x63, 0x00, 0x30, 0x50, 0x10, 0x30, 0x50, 0x42, 0xFB, 0x7F, 0x10, 0x24, 0x33, 0xF0, 0x23, 0x40, 0x02, 0x40, 0xB8, 0xBD, 0x9A, 0x0A, 0x03, 0x80, 0x52, 0x42, 0x00, 0x2E, 0x23, 0x40, 0x02, 0x40, 0xB8, 0xBD, 0x9A, 0x0A, 0x03, 0x80, 0x52, 0x42, 0x00, 0x2E, 0x23, 0x40, 0x02, 0x40, 0xB8, 0xBD, 0x9A, 0x0A, 0x3C, 0x80, 0x42, 0x42, 0x7E, 0x84, 0xE0, 0x7F, 0x86, 0x82, 0xD1, 0x7F, 0x00, 0x2E, 0x82, 0x40, 0x98, 0x2E, 0x92, 0xB2, 0xD1, 0x6F, 0x7D, 0x82, 0x00, 0x2E, 0x40, 0x42, 0x7E, 0x80, 0x0B, 0x82, 0x02, 0x40, 0xD1, 0x7F, 0x98, 0x2E, 0x92, 0xB2, 0xD1, 0x6F, 0x78, 0x82, 0x00, 0x2E, 0x40, 0x42, 0x7E, 0x80, 0x10, 0x82, 0x02, 0x40, 0xD1, 0x7F, 0x98, 0x2E, 0x92, 0xB2, 0xD1, 0x6F, 0x73, 0x82, 0x00, 0x2E, 0x40, 0x42, 0x7E, 0x80, 0xE1, 0x6F, 0x12, 0x40, 0x52, 0x42, 0x28, 0xB5, 0x52, 0x42, 0x00, 0x2E, 0x12, 0x40, 0x52, 0x42, 0x28, 0xB5, 0x52, 0x42, 0x00, 0x2E, 0x00, 0x40, 0x50, 0x42, 0x08, 0xB4, 0x40, 0x42, 0x00, 0x2E, 0xFB, 0x6F, 0xD0, 0x5F, 0xB8, 0x2E, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0x80, 0x2E, 0x18, 0x00, 0xFD, 0x2D
};

static const struct bmi08x_iir_filter_coef bmi08x_iir_coef_opt_noise_2000_hz =
{
	.filter_order = 4,
	.iir_a_coef = {1.0, -2.12848682, 1.95248966, -0.84421282, 0.1439441},
	.iir_b_coef = {0.00773338, 0.03093353, 0.0464003 , 0.03093353, 0.00773338}
};

static const struct bmi08x_iir_filter_coef bmi08x_iir_coef_opt_noise_1000_hz =
{
	.filter_order = 4,
	.iir_a_coef = {1.0, -0.31247379,  0.51690622, -0.06671203, 0.01956665},
	.iir_b_coef = {0.07233044, 0.28932176, 0.43398265, 0.28932176, 0.07233044}
};

/*********************************************************************/
/* function prototype declarations */
/*********************** BMI08x Accelerometer function prototypes ************************/
/*!
*  @brief This API is the entry point for accel sensor.
*  It performs the selection of I2C/SPI read mechanism according to the
*  selected interface and reads the chip-id of accel sensor.
*
*  @param[in,out] dev  : Structure instance of bmi08x_dev.
*  @note : Refer user guide for detailed info.
*
*  @return Result of API execution status
*  @retval zero -> Success /-ve value -> Error
*/
int8_t bmi08a_init(struct bmi08x_dev *dev);

/*!
 *  @brief This API is used to write the binary configuration in the sensor
 *
 *  @param[in] dev : Structure instance of bmi08x_dev.
 *
 *  @return Result of API execution status
 *  @retval zero -> Success / -ve value -> Error
 */
int8_t bmi08a_write_config_file(const struct bmi08x_dev *dev);

/*!
 *  @brief This API writes the feature configuration to the accel sensor.
 *
 *  @param[in] reg_addr : Address offset of the feature setting inside the feature conf region.
 *  @param[in] reg_data : Feature settings.
 *  @param[in] len : Number of 16 bit words to be written.
 *  @param[in] dev : Structure instance of bmi08x_dev.
 *
 *  @return Result of API execution status
 *  @retval zero -> Success / -ve value -> Error
 */
int8_t bmi08a_write_feature_config(uint8_t reg_addr, uint16_t *reg_data, uint8_t len, const struct bmi08x_dev *dev);

/*!
 *  @brief This API reads the data from the given register address of accel sensor.
 *
 *  @param[in] reg_addr  : Register address from where the data to be read
 *  @param[out] reg_data : Pointer to data buffer to store the read data.
 *  @param[in] len       : No. of bytes of data to be read.
 *  @param[in] dev       : Structure instance of bmi08x_dev.
 *
 *  @return Result of API execution status
 *  @retval zero -> Success / -ve value -> Error
 */
int8_t bmi08a_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bmi08x_dev *dev);

/*!
 *  @brief This API writes the given data to the register address
 *  of accel sensor.
 *
 *  @param[in] reg_addr  : Register address to where the data to be written.
 *  @param[in] reg_data  : Pointer to data buffer which is to be written
 *  in the sensor.
 *  @param[in] len       : No. of bytes of data to write.
 *  @param[in] dev       : Structure instance of bmi08x_dev.
 *
 *  @return Result of API execution status
 *  @retval zero -> Success / -ve value -> Error
 */
int8_t bmi08a_set_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bmi08x_dev *dev);

/*!
 *  @brief This API reads the error status from the accel sensor.
 *
 *  Below table mention the types of error which can occur in the sensor
 *@verbatim
 *************************************************************************
 *        Error           |       Description
 *************************|***********************************************
 *                        |       Fatal Error, chip is not in operational
 *        fatal           |       state (Boot-, power-system).
 *                        |       This flag will be reset only by
 *                        |       power-on-reset or soft reset.
 *************************|***********************************************
 *                        |       Value        Name       Description
 *        error_code      |       000        no_error     no error
 *                        |       001        accel_err      error in
 *                        |                               ACCEL_CONF
 *************************************************************************
 *@endverbatim
 *  @param[out] err_reg : Pointer to structure variable which stores the
 *  error status read from the sensor.
 *  @param[in] dev : Structure instance of bmi08x_dev.
 *
 *  @return Result of API execution status
 *  @retval zero -> Success / -ve value -> Error
 */
int8_t bmi08a_get_error_status(struct bmi08x_err_reg *err_reg, const struct bmi08x_dev *dev);

/*!
 *  @brief This API reads the status of the accel sensor.
 *
 *  Below table lists the sensor status flags
 *@verbatim
 *************************************************************************
 *        Status                    |       Description
 ***********************************|*************************************
 *        drdy_accel                | Data ready for Accel.
 *************************************************************************
 *@endverbatim
 *
 *  @param[out] status : Variable used to store the sensor status flags
 *  which is read from the sensor.
 *  @param[in] dev : Structure instance of bmi08x_dev.
 *
 *  @return Result of API execution status
 *  @retval zero -> Success / -ve value -> Error
 *
 */
int8_t bmi08a_get_status(uint8_t *status, const struct bmi08x_dev *dev);

/*!
 *  @brief This API resets the accel sensor.
 *
 *  @param[in] dev  : Structure instance of bmi08x_dev.
 *
 *  @return Result of API execution status
 *  @retval zero -> Success / -ve value -> Error
 */
int8_t bmi08a_soft_reset(const struct bmi08x_dev *dev);

/*!
 * @brief This API reads the accel config values ie odr, band width and range from the sensor,
 * store it in the bmi08x_dev structure instance
 * passed by the user.
 *  @param[in,out]  dev	: Structure instance of bmi08x_dev.
 *
 *  @return Result of API execution status
 *  @retval zero -> Success / -ve value -> Error
 *
 */
int8_t bmi08a_get_meas_conf(struct bmi08x_dev *dev);

/*!
 *  @brief This API sets the Output data rate, range and bandwidth
 *  of accel sensor.
 *  @param[in] dev  : Structure instance of bmi08x_dev.
 *
 *  @note : The user must select one among the following macros to
 *  select range value for BMI085 accel
 *		config                         |   value
 *      -------------------------------|---------------------------
 *      BMI085_ACCEL_RANGE_2G          |   0x00
 *      BMI085_ACCEL_RANGE_4G          |   0x01
 *      BMI085_ACCEL_RANGE_8G          |   0x02
 *      BMI085_ACCEL_RANGE_16G         |   0x03
 *
 *	@note : The user must select one among the following macros to
 *  select range value for BMI088 accel
 *		config                         |   value
 *      -------------------------------|---------------------------
 *      BMI088_ACCEL_RANGE_3G          |   0x00
 *      BMI088_ACCEL_RANGE_6G          |   0x01
 *      BMI088_ACCEL_RANGE_12G         |   0x02
 *      BMI088_ACCEL_RANGE_24G         |   0x03
 *
 *  @note : Refer user guide for detailed info.
 *
 *  @return Result of API execution status
 *  @retval zero -> Success / -ve value -> Error
 */
int8_t bmi08a_set_meas_conf(const struct bmi08x_dev *dev);

/*!
 * @brief This API reads the accel power mode from the sensor,
 * store it in the bmi08x_dev structure instance
 * passed by the user.
 *  @param[in,out]  dev	: Structure instance of bmi08x_dev.
 *
 *  @return Result of API execution status
 *  @retval zero -> Success / -ve value -> Error
 *
 */
int8_t bmi08a_get_power_mode(struct bmi08x_dev *dev);

/*!
 *  @brief This API sets the power mode of the accel sensor.
 *
 *  @param[in] dev  : Structure instance of bmi08x_dev.
 *
 *  @return Result of API execution status
 *  @retval zero -> Success / -ve value -> Error
 */
int8_t bmi08a_set_power_mode(const struct bmi08x_dev *dev);

/*!
 *  @brief This API reads the accel data from the sensor,
 *  store it in the bmi08x_sensor_data structure instance
 *  passed by the user.
 *
 *  @param[out] accel  : Structure pointer to store accel data
 *  @param[in]  dev    : Structure instance of bmi08x_dev.
 *
 *
 *  @return Result of API execution status
 *  @retval zero -> Success /-ve value -> Error
 */
int8_t bmi08a_get_data(struct bmi08x_sensor_data *accel, const struct bmi08x_dev *dev);

/*!
 *  @brief This API configures the necessary accel interrupt
 *  based on the user settings in the bmi08x_int_cfg
 *  structure instance.
 *
 *  @param[in] int_config  : Structure instance of bmi08x_int_cfg.
 *  @param[in] dev         : Structure instance of bmi08x_dev.
 *  @note : Refer user guide for detailed info.
 *
 *  @return Result of API execution status
 *  @retval zero -> Success / -ve value -> Error
 */
int8_t bmi08a_set_int_config(const struct bmi08x_accel_int_channel_cfg *int_config, const struct bmi08x_dev *dev);

/*!
 *  @brief This API reads the temperature of the sensor in degree Celcius.
 *
 *  @param[in]  dev             : Structure instance of bmi08x_dev.
 *  @param[out] sensor_temp     : Pointer to store sensor temperature in degree Celcius
 *
 *  @note Temperature data output must be divided by a factor of 1000
 *
 *  Consider sensor_temp = 19520 , Then the actual temperature is 19.520 degree Celsius
 *
 *  @return Result of API execution status
 *  @retval zero -> Success / -ve value -> Error
 */
int8_t bmi08a_get_sensor_temperature(const struct bmi08x_dev *dev, int32_t *sensor_temp);

/*!
 *  @brief This API reads the sensor time of the accel sensor.
 *
 *  @param[in]  dev             : Structure instance of bmi08x_dev.
 *  @param[out] sensor_time     : Pointer to store sensor time
 *
 *  @return Result of API execution status
 *  @retval zero -> Success / -ve value -> Error
 */
int8_t bmi08a_get_sensor_time(const struct bmi08x_dev *dev, uint32_t *sensor_time);

/*!
 *  @brief This API applies the passed IIR filter to the passed sensor data.
 *
 *  @param[in/out] accel   : Pointer to instance of sensor data struct.
 *  @param[in/out] iir     : Pointer to instance of iir filter struct.
 *
 *  @return Result of API execution status
 *  @retval zero -> Success / -ve value -> Error
 */
struct bmi08x_sensor_data bmi08a_apply_iir_filter(struct bmi08x_sensor_data accel, struct bmi08x_iir_filter *iir);

int8_t bmi08a_init_iir_filter(struct bmi08x_iir_filter *iir);

/*!
 *  @brief This API checks whether the self test functionality of the sensor
 *  is working or not
 *
 *  @param[in] dev    : Structure instance of bmi08x_dev
 *
 *  @return results of self test
 *  @retval zero -> Success / +ve value -> Warning / -ve value -> Error
 *
 *   Return value                  |   Result of self test
 * --------------------------------|---------------------------------
 *  BMI08X_OK                      |  Self test success
 *  BMI08X_W_SELF_TEST_FAIL        |  self test fail
 */
int8_t bmi08a_perform_selftest(struct bmi08x_dev *dev);

/*********************** BMI088 Gyroscope function prototypes ****************************/
/*!
 *  @brief This API is the entry point for gyro sensor.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of gyro sensor.
 *
 *  @param[in,out] dev : Structure instance of bmi08x_dev.
 *  @note : Refer user guide for detailed info.
 *
 *  @return Result of API execution status
 *  @retval zero -> Success / -ve value -> Error
 */
int8_t bmi08g_init(struct bmi08x_dev *dev);

/*!
 *  @brief This API reads the data from the given register address of gyro sensor.
 *
 *  @param[in] reg_addr  : Register address from where the data to be read
 *  @param[out] reg_data : Pointer to data buffer to store the read data.
 *  @param[in] len       : No. of bytes of data to be read.
 *  @param[in] dev       : Structure instance of bmi08x_dev.
 *
 *  @return Result of API execution status
 *  @retval zero -> Success / -ve value -> Error
 */
int8_t bmi08g_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bmi08x_dev *dev);

/*!
 *  @brief This API writes the given data to the register address
 *  of gyro sensor.
 *
 *  @param[in] reg_addr  : Register address to where the data to be written.
 *  @param[in] reg_data  : Pointer to data buffer which is to be written
 *  in the sensor.
 *  @param[in] len       : No. of bytes of data to write.
 *  @param[in] dev       : Structure instance of bmi08x_dev.
 *
 *  @return Result of API execution status
 *  @retval zero -> Success / -ve value -> Error
 */
int8_t bmi08g_set_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bmi08x_dev *dev);

/*!
 *  @brief This API resets the gyro sensor.
 *
 *  @param[in] dev : Structure instance of bmi08x_dev.
 *
 *  @return Result of API execution status
 *  @retval zero -> Success / -ve value -> Error
 *
 */
int8_t bmi08g_soft_reset(const struct bmi08x_dev *dev);

/*!
 *  @brief This API reads the gyro odr and range from the sensor,
 *  store it in the bmi08x_dev structure instance
 *  passed by the user.
 *
 *  @param[in] dev : Structure instance of bmi08x_dev.
 *
 *  @return Result of API execution status
 *  @retval zero -> Success / -ve value -> Error
 *
 *  @note : band width also updated, which is same as odr
 *			Refer user guide for detailed info.
 */
int8_t bmi08g_get_meas_conf(struct bmi08x_dev *dev);

/*!
 *  @brief This API sets the output data rate, range and bandwidth
 *  of gyro sensor.
 *
 *  @param[in] dev : Structure instance of bmi08x_dev.
 *  @note : Refer user guide for detailed info.
 *
 *  @return Result of API execution status
 *  @retval zero -> Success / -ve value -> Error
 *
 *  @note : No need to give the band width parameter,
 *			odr will update the band width.
 *			Refer user guide for detailed info.
 */
int8_t bmi08g_set_meas_conf(const struct bmi08x_dev *dev);

/*!
 *  @brief This API gets the power mode of the gyro sensor and store it
 *  inside the instance of bmi08x_dev passed by the user.
 *
 *  @param[in] dev : Structure instance of bmi08x_dev.
 *
 *  @return Result of API execution status
 *  @retval zero -> Success / -ve value -> Error
 */
int8_t bmi08g_get_power_mode(struct bmi08x_dev *dev);

/*!
 *  @brief This API sets the power mode of the gyro sensor.
 *
 *  @param[in] dev : Structure instance of bmi08x_dev.
 *
 *  @return Result of API execution status
 *  @retval zero -> Success / -ve value -> Error
 */
int8_t bmi08g_set_power_mode(const struct bmi08x_dev *dev);

/*!
 *  @brief This API reads the gyro data from the sensor,
 *  store it in the bmi08x_sensor_data structure instance
 *  passed by the user.
 *
 *  @param[out] gyro   : Structure pointer to store gyro data
 *  @param[in] dev     : Structure instance of bmi08x_dev.
 *
 *  @return Result of API execution status
 *  @retval zero -> Success / -ve value -> Error
 */
int8_t bmi08g_get_data(struct bmi08x_sensor_data *gyro, const struct bmi08x_dev *dev);

/*!
 *  @brief This API configures the necessary gyro interrupt
 *  based on the user settings in the bmi08x_int_cfg
 *  structure instance.
 *
 *  @param[in] int_config  : Structure instance of bmi08x_int_cfg.
 *  @param[in] dev         : Structure instance of bmi08x_dev.
 *  @note : Refer user guide for detailed info.
 *
 *  @return Result of API execution status
 *  @retval zero -> Success / -ve value -> Error
 */
int8_t bmi08g_set_int_config(const struct bmi08x_gyro_int_channel_cfg *int_config, const struct bmi08x_dev *dev);

/*!
 *  @brief This API applies the passed IIR filter to the passed sensor data.
 *
 *  @param[in/out] gyro    : Pointer to instance of sensor data struct.
 *  @param[in/out] iir     : Pointer to instance of iir filter struct.
 *
 *  @return Result of API execution status
 *  @retval zero -> Success / -ve value -> Error
 */
struct bmi08x_sensor_data bmi08g_apply_iir_filter(struct bmi08x_sensor_data gyro, struct bmi08x_iir_filter *iir);

int8_t bmi08g_init_iir_filter(struct bmi08x_iir_filter *iir);

/*!
 *  @brief This API checks whether the self test functionality of the
 *  gyro sensor is working or not
 *
 *  @param[in]  dev : Structure instance of bmi08x_dev.
 *
 *  @return Result of API execution status
 *  @retval zero -> Success / +ve value -> Warning / -ve value -> Error
 *
 *   Return value                  |   Result of self test
 * --------------------------------|---------------------------------
 *  BMI08X_OK                      |  Self test success
 *  BMI08X_W_SELF_TEST_FAIL        |  self test fail
 */
int8_t bmi08g_perform_selftest(const struct bmi08x_dev *dev);


#ifdef __cplusplus
}
#endif

#endif /* BMI08X_H_ */

/** @}*/

